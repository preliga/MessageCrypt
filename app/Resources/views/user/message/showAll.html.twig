{% extends 'user/menu.html.twig' %}

{% block content %}

    <h2 class="page-header">Message</h2>

    <div class="tabBox">

        <ul class="nav nav-tabs">
            <li class="active"><a href="#tabMessages">Messages</a></li>
            <li><a href="#tabCryptFunction">Crypt function</a></li>
            <li><a href="#tabDecryptFunction">Decrypt function</a></li>
        </ul>

        <div class="tab-content">
            <div id="tabMessages">
                <br>
                <form action="{{  path('user_message_sendMessage', {'friendId': friendId}) }}" method="POST">
                    <div class="form-group messageBox">
                        <textarea class="form-control" placeholder="Message" name='textMessage' rows="5"></textarea>
                        <br>
                        <button class="btn btn-info sendMessage">Send</button>
                    </div>
                </form>
                <div class="panel-body-scroll">
                    <ul class="chat">
                        {% for msg in messages %}
                            <div class="{% if msg.userid1.id == friendId %} chat-div-left {% else %} chat-div-right {% endif %}">
                                <li class="{% if msg.userid1.id == friendId %} left {% else %} right {% endif %} clearfix">
                                    <span class="chat-img {% if msg.userid1.id == friendId %} pull-left {% else %} pull-right {% endif %}">
                                        {% if msg.userid1.avatar %}
                                            <img src="{{ asset('uploads/avatars/' ~ msg.userid1.avatar) }}" class="avatarMsg img-circle">
                                        {% else %}
                                            <img src='/images/empty.png' class="avatarMsg img-circle">
                                        {% endif %}
                                    </span>
                                    <div class="chat-body clearfix">
                                        <div class="header">
                                            {% if msg.userid1.id == friendId %}
                                                <small class="pull-right text-muted">
                                                    <span class="glyphicon glyphicon-time"></span>
                                                    {{ msg.date | date("Y-m-d H:i:s") }}
                                                </small>
                                                <strong class="primary-font">
                                                    <a href="{{ path("user_profile_profile", {'id': msg.userid1.id}) }}">
                                                        {{ msg.userid1.name }}
                                                        {{ msg.userid1.lastname }}
                                                    </a>
                                                </strong>
                                            {% else %}
                                                <strong class="primary-font">
                                                    <a href="{{ path("user_profile_profile", {'id': msg.userid1.id}) }}">
                                                        {{ msg.userid1.name }}
                                                        {{ msg.userid1.lastname }}
                                                    </a>
                                                </strong>
                                                <small class="pull-left text-muted">
                                                    <span class="glyphicon glyphicon-time"></span>
                                                    {{ msg.date | date("Y-m-d H:i:s") }}
                                                </small>
                                            {% endif %}
                                        </div>
                                        <p>
                                            {{ msg.text }}
                                        </p>
                                    </div>
                                </li>
                            </div>
                        {% endfor %}
                    </ul>
                </div>
            </div>
            <div id="tabCryptFunction" class="tab-pane">
                <br>
                <div class="form-group messageBox">
                    <textarea id='testMessageCrypt' class="form-control" placeholder="Test Message"  rows="5"></textarea>
                    <br>
                    <button class="btn btn-success testCrypt" style="margin-bottom: 5px;">TEST</button>
                    <br>
                    <input id='keyCrypt' class="form-control" placeholder="Key" type="text" style="width: 80%; float: left;"/>
                    <button class="btn btn-info createHashCrypt form-control" style="width: 20%;"> Hash </button>
                    <br>

                    <select id='cryptFunctions' class="form-control" style="width: 40%; float: left;">
                        <option value="-1">Choose function</option>
                    </select>
                    <button class="btn btn-warning form-control loadCryptFunctionToEditor" style="width: 20%; float: left;">Load</button>
                    <button class="btn btn-primary form-control saveCryptOpenWindow" style="width: 20%; float: left;">Save</button>
                    <button class="btn btn-danger form-control clearCryptFunctionsOpenWindow" style="width: 20%; float: left;">Clear all Functions</button>
                    <br>
                    <div id="updateDiv" hidden>
                        <input id='cryptNameFunction' class="form-control" placeholder="Function`s name" type="text" style="width: 50%; float: left;"/>
                        <button class="btn btn-danger form-control removeCryptFunction" style="width: 25%; float: left;"> Remove </button>
                        <button class="btn btn-success form-control updateCryptFunction" style="width: 25%; float: left;"> Update </button>
                    </div>
                    <br>
                    <br>
                </div>
                function (plainText, key) <br>
                { <br>
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var cipherText = plainText;
                <div id="cryptEditor"></div>
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return cipherText;
                <br>
                }
            </div>
            <div id="tabDecryptFunction" class="tab-pane">
                <br>
                <div class="form-group messageBox">
                    <textarea id='testMessageDecrypt' class="form-control" placeholder="Test Message"  rows="5"></textarea>
                    <br>
                    <button class="btn btn-success testDecrypt form-control">TEST</button>
                    <br>
                    <input id='keyDecrypt' class="form-control" placeholder="Key" type="text" style="width: 80%; float: left;"/>
                    <button class="btn btn-info createHashDecrypt" style="width: 20%"> Hash </button>
                    <br>

                    <select id='decryptFunctions' class="form-control" style="width: 40%; float: left;">
                        <option value="-1">Choose function</option>
                    </select>
                    <button class="btn btn-warning form-control loadDecryptFunctionToEditor" style="width: 20%; float: left;">Load</button>
                    <button class="btn btn-primary form-control saveDecryptOpenWindow" style="width: 20%; float: left;">Save</button>
                    <button class="btn btn-danger form-control clearDecryptFunctionsOpenWindow" style="width: 20%; float: left;">Clear all Functions</button>
                    <br>
                    <div id="updateDiv" hidden>
                        <input id='decryptNameFunction' class="form-control" placeholder="Function`s name" type="text" style="width: 50%; float: left;"/>
                        <button class="btn btn-danger form-control removeDecryptFunction" style="width: 25%; float: left;"> Remove </button>
                        <button class="btn btn-success form-control updateDecryptFunction" style="width: 25%; float: left;"> Update </button>
                    </div>
                    <br>
                    <br>
                </div>
                function (cipherText, key) <br>
                { <br>
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var plainText = cipherText;
                <div id="decryptEditor"></div>
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return plainText;
                <br>
                }
            </div>
        </div>

    </div>


{% endblock %}

{% block pagescripts %}
    <script>
        $(function(){
            /**
             * AuiEditor init
             */
            AuiEditorInit('cryptEditor');
            AuiEditorInit('decryptEditor');

//            loadCryptFunctions();
            loadFunctions("-1", "crypt");
            loadFunctions("-1", "decrypt");
        });

        /*
            Default
         */

        function createHash(id)
        {
            var keyElement = $('#' + id);
            var key = keyElement.val();

            var hex = '';
            for(var i=0;i<key.length;i++) {
                hex += ''+key.charCodeAt(i).toString(16).toUpperCase();
            }
            keyElement.val(hex);
        }

        function loadFunctions(id, type)
        {
            if(type === 'crypt')
            {
                var functionsStorge = localStorage.cryptFunctions;
            }
            else if (type === 'decrypt')
            {
                var functionsStorge = localStorage.decryptFunctions;
            }

            var html = "<option value='-1'>Choose function</option>";

            if( typeof functionsStorge !== 'undefined' && functionsStorge !== null )
            {
                var functions = JSON.parse(functionsStorge);

                functions.forEach(function(item, key){

                    var selected = "";
                    if(id == item['id'] )
                    {
                        selected = "selected";
                    }

                    html += "<option "+ selected +" value='"+item['id']+"'> "+ item['name'] +"</option>";
                });
            }

            $("#" + type + "Functions").html(html);
        }

        function saveFunction(type)
        {
            if(type === 'crypt')
            {
                var functionsStorge = localStorage.cryptFunctions;
            }
            else if (type === 'decrypt')
            {
                var functionsStorge = localStorage.decryptFunctions;
            }


            console.log(functionsStorge);
            var functions;
            if( typeof functionsStorge === 'undefined' || functionsStorge === null ) {
                functions = [];
            } else {
                functions = JSON.parse(functionsStorge);
            }

            var id = Math.floor((1 + Math.random()) * 0x10000);
            var name = $('#functionName').val();

            functions.push({'id':id, 'name': name, 'function': $("#" + type + "EditorTextarea").val()});
            console.log(functions);


            if(type === 'crypt')
            {
                localStorage.cryptFunctions = JSON.stringify(functions);
            }
            else if (type === 'decrypt')
            {
                localStorage.cryptFunctions = JSON.stringify(functions);
            }
            loadFunctions("-1", type);
        }

        function loadFunctionToEditor(type)
        {
            var id = $("#"+type+"Functions").val();

            var functionStr = "";
            var name = "";

            if(id !== "-1")
            {
                if( typeof localStorage.cryptFunctions !== 'undefined' && localStorage.cryptFunctions !== null )
                {
                    var cryptFunctions = JSON.parse(localStorage.cryptFunctions);


                    cryptFunctions.forEach(function(item, key){

                        if(item['id'] == id) {
                            functionStr = item['function'];
                            name = item['name'];
                            return;
                        }
                    });
                }
            }

            $('#'+type+'EditorTextarea').val(functionStr);
            $('#'+type+'EditorTextarea').change();

            if(name !== "") {
                $("#"+type+"Function").val(name);
                $("#updateDiv").show();
            } else {
                $("#updateDiv").hide();
            }
        }

        /*
            Crypt function
         */

        $(".loadCryptFunctionToEditor").on('click', function () {
            loadFunctionToEditor('crypt');
//            var id = $("#cryptFunctions").val();
//
//            var functionStr = "";
//            var name = "";
//
//            if(id !== "-1")
//            {
//                if( typeof localStorage.cryptFunctions !== 'undefined' && localStorage.cryptFunctions !== null )
//                {
//                    var cryptFunctions = JSON.parse(localStorage.cryptFunctions);
//
//
//                    cryptFunctions.forEach(function(item, key){
//
//                        if(item['id'] == id) {
//                            functionStr = item['function'];
//                            name = item['name'];
//                            return;
//                        }
//                    });
//                }
//            }
//
//            $('#cryptEditorTextarea').val(functionStr);
//            $('#cryptEditorTextarea').change();
//
//            if(name !== "") {
//                $("#nameCryptFunction").val(name);
//                $("#updateDiv").show();
//            } else {
//                $("#updateDiv").hide();
//            }
        });

        $(".removeCryptFunction").on('click', function () {

            if( typeof localStorage.cryptFunctions !== 'undefined' && localStorage.cryptFunctions !== null ) {
                var cryptFunctions = JSON.parse(localStorage.cryptFunctions);

                var id = $("#cryptFunctions").val();

                cryptFunctions.forEach(function(item, key){

                    if(item['id'] == id) {
                        cryptFunctions.splice(key,1);
                        return;
                    }
                });

                localStorage.cryptFunctions = JSON.stringify(cryptFunctions);

                loadCryptFunctions();
                $('#cryptEditorTextarea').val("");
                $('#cryptEditorTextarea').change();
                $("#updateDiv").hide();

            }
        });

        $(".updateCryptFunction").on('click', function () {


            if( typeof localStorage.cryptFunctions !== 'undefined' && localStorage.cryptFunctions !== null ) {
                var cryptFunctions = JSON.parse(localStorage.cryptFunctions);

                var id = $("#cryptFunctions").val();
                var name = $('#nameCryptFunction').val();
                var functionStr = $('#cryptEditorTextarea').val();

                cryptFunctions.forEach(function(item, key){

                    if(item['id'] == id) {
                        item['name'] = name;
                        item['function'] = functionStr;
                        return;
                    }
                });

                localStorage.cryptFunctions = JSON.stringify(cryptFunctions);

//                loadCryptFunctions(id);
                loadFunctions(id, "crypt");
            }
        });

        $(".clearCryptFunctionsOpenWindow").on('click', function () {

            var body = "" +
                "    <div class='form-group'>\n" +
                "       <p>Do you want clear all crypt functions?</p>\n"+
                "       <button class='btn btn-danger form-control clearCryptFunctions'>Clear</button>\n" +
                "       <button class='btn btn-default form-control cancelCryptFunctions'>Cancel</button>\n" +
                "    </div>\n" +
                "";

            var events = function(modal){
                $(".cancelCryptFunctions").on('click', function () {
                    modal.destroy();
                });

                $(".clearCryptFunctions").on('click', function () {
                    localStorage.removeItem('cryptFunctions');
//                    loadCryptFunctions();
                    loadFunctions("-1", "crypt");
                    modal.destroy();
                });
            };

            AuiModalInit(body, "<h3>Clear crypt functions</h3>", "modalClearCryptFunctions",events);
        });

        $(".saveCryptOpenWindow").on('click', function () {
            var body = "" +
                "    <div class='form-group'>\n" +
                "       <input class='form-control' type='text' id='functionName' placeholder='Function`s name'/>\n" +
                "       <button class='btn btn-primary form-control saveCrypt'>Save</button>\n" +
                "    </div>\n" +
                "";

            var events = function(modal){
                $(".saveCrypt").on('click', function () {
                    saveFunction('crypt');
                    modal.destroy();
                });
            };

            AuiModalInit(body, "<h3>Save function</h3>", "modalCrypt",events);
        });

        $(".testCrypt").on('click', function () {
            var functionStr = createCryptFunction();
            var plainText = $('#testMessageCrypt').val();
            var key = $('#keyCrypt').val();

            try {
                var cryptFunction = new Function('plainText','key',functionStr);
                var cipherText = cryptFunction(plainText,key);

                createAlert(cipherText,'<h3>CipherText</h3>');
            }catch (e){
                var annotations =  $('#cryptEditorAnnotations').val();
                createAlert("<p>"+annotations+"</p>", '<h3>Syntax exception</h3>');
            }
        });

        $(".sendMessage").on('click', function () {

            var functionStr = createCryptFunction();
            var plainText = $('[name="textMessage"]').val();
            var key = $('#keyCrypt').val();

            try {
                var cryptFunction = new Function('plainText','key',functionStr);
                var cipherText = cryptFunction(plainText,key);

                $('[name="textMessage"]').val(cipherText);
            }catch (e){
                var annotations =  $('#cryptEditorAnnotations').val();
                createAlert("<p>"+annotations+"</p>", '<h3>Syntax exception</h3>');
                return false;
            }
        });

        $(".createHashCrypt").on('click', function () {
            createHash('keyCrypt');
        });



//        function saveCrypt()
//        {
//            var cryptFunctions;
//            if( typeof localStorage.cryptFunctions === 'undefined' || localStorage.cryptFunctions === null ) {
//                cryptFunctions = [];
//            } else {
//                cryptFunctions = JSON.parse(localStorage.cryptFunctions);
//            }
//
//            var id = Math.floor((1 + Math.random()) * 0x10000);
//            var name = $('#functionName').val();
//
//            cryptFunctions.push({'id':id, 'name': name, 'function': $('#cryptEditorTextarea').val()});
//
//            console.log(cryptFunctions);
//            localStorage.cryptFunctions = JSON.stringify(cryptFunctions);
////            loadCryptFunctions();
//            loadFunctions("-1", "crypt");
//        }

//        function loadCryptFunctions(id)
//        {
//            var html = "<option value='-1'>Choose function</option>";
//
//            if( typeof localStorage.cryptFunctions !== 'undefined' && localStorage.cryptFunctions !== null )
//            {
//                var cryptFunctions = JSON.parse(localStorage.cryptFunctions);
//
//                cryptFunctions.forEach(function(item, key){
//
//                    var selected = "";
//                    if(id == item['id'] )
//                    {
//                        selected = "selected";
//                    }
//
//                   html += "<option "+ selected +" value='"+item['id']+"'> "+ item['name'] +"</option>";
//                });
//            }
//
//            $("#cryptFunctions").html(html);
//        }

        function createCryptFunction()
        {
            return "var cipherText = plainText; " + $('#cryptEditorTextarea').val() + "return cipherText;";
        }

        /*
            Decrypt function
         */

        $(".testDecrypt").on('click', function () {
            var functionStr = createDecryptFunction();

            console.log(functionStr);
            var cipherText = $('#testMessageDecrypt').val();
            var key = $('#keyDecrypt').val();

            try {
                var decryptFunction = new Function('cipherText','key',functionStr);
                var plainText = decryptFunction(cipherText,key);
                alert(plainText);
                createAlert(plainText,'PlainText');
            }catch (e){
                var annotations =  $('#decryptEditorAnnotations').val();
                createAlert("<p>"+annotations+"</p>", '<h3>Syntax exception</h3>');
            }
        });

        $(".createHashDecrypt").on('click', function () {
            createHash('keyDecrypt');
        });



        function createDecryptFunction()
        {
            return "var plainText = cipherText; " + $('#decryptEditorTextarea').val() + "return plainText;";
        }
    </script>
{% endblock %}